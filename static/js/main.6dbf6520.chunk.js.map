{"version":3,"sources":["Components/Toolbar/Toolbar.module.sass","Components/NoSearched/NoSearched.module.sass","Components/NoContacts/NoContacts.module.sass","Routes/Home/Home.module.sass","Routes/NotFound/NotFound.module.sass","Components/Footer/Footer.module.sass","Components/App/App.module.sass","Redux/types.js","Redux/reducers/contactsReducer.js","Redux/reducers/alertsReducer.js","Redux/reducers/selectedContactsReducer.js","Redux/index.js","Redux/actions.js","Util/config.js","Redux/middleware.js","Components/Header/Header.jsx","Util/ItemTypes.js","Components/Contact/Contact.jsx","Components/ContactSkeleton/ContactSkeleton.jsx","Components/Modal/Modal.jsx","Components/ConfirmDelete/ConfirmDelete.jsx","Components/Toolbar/Toolbar.jsx","Components/NoSearched/Img/noSearched.png","Components/NoSearched/NoSearched.jsx","Components/NoContacts/Img/noContacts.png","Components/NoContacts/NoContacts.jsx","Routes/Home/Home.jsx","Util/Validator.js","Util/FormatText.js","Util/showFormErrors.js","Routes/AddContact/AddContact.jsx","Util/setInitialContact.js","Routes/EditContact/EditContact.jsx","Routes/NotFound/Img/notFound.png","Routes/NotFound/NotFound.jsx","Components/Footer/Footer.jsx","Components/Alerts/Alerts.jsx","Routes/Details/Details.jsx","Components/App/App.jsx","index.js","Components/ContactSkeleton/ContactSkeleton.module.sass","Components/Contact/Contact.module.sass","Routes/EditContact/EditContact.module.sass","Components/Header/Header.module.sass","Components/Modal/Modal.module.sass","Routes/AddContact/AddContact.module.sass","Components/Alerts/Alerts.module.sass","Routes/Details/Details.module.sass"],"names":["module","exports","GET_CONTACTS","DELETE_CONTACT","SET_CONTACTS","SET_SEARCHED_CONTACTS","SET_ALERTS","SELECT_CONTACT","SELECT_ALL_CONTATCS","UNSELECT_CONTACT","defaultState","contacts","searchedContacts","alerts","selectedContacts","rootReducer","combineReducers","state","type","payload","updatedState","JSON","parse","stringify","filter","id","Object","keys","length","forEach","store","createStore","composeWithDevTools","applyMiddleware","thunk","getContactsAction","setSearchedContactsAction","setAlertsAction","unselectContactAction","config","link","deleteContactFromDB","_id","requestOptions","method","dispatch","fetch","then","catch","err","console","log","message","Header","history","useHistory","contactsID","useSelector","map","contact","selectedContactsCount","useDispatch","className","s","Container","Row","Col","Navbar","variant","expand","Brand","logo","to","Nav","Button","onClick","push","DropdownButton","as","ButtonGroup","drop","title","dropdownMenu","Dropdown","Item","Badge","selectedContactsId","allPromises","promise","Promise","res","rej","all","json","deleteSelected","OverlayTrigger","placement","overlay","Tooltip","disabled","ItemTypes","Contact","index","onDelete","onDnD","isSelected","ref","useRef","useDrop","accept","collect","monitor","handlerId","getHandlerId","hover","item","current","dragIndex","hoverIndex","useDrag","isDragging","drag","opacity","xs","sm","md","lg","xl","style","Card","text","bg","Body","cardBody","Title","firstName","lastName","Text","email","primaryNumber","workNumber","Subtitle","notes","detailsBtn","Footer","options","Form","Check","check","onChange","checked","target","ContactSkeleton","placeholder","Modal","children","onClose","$root","document","createElement","$background","useEffect","body","appendChild","handleKeyDown","key","documentElement","addEventListener","removeEventListener","remove","ReactDOM","createPortal","fluid","block","closeBtn","ConfirmDelete","onConfirm","onCancel","marginBottom","marginRight","Toolbar","InputGroup","onInput","searchString","value","toString","trim","replace","pattern","RegExp","updatedSearchedContacts","test","FormControl","Append","NoSearched","src","noSearchedImg","alt","NoContacts","noContactsImg","Contacts","useState","loading","setLoading","deletingContactId","setDeletingContactId","deletingContactFullname","setDeletingContactFullname","location","updatedAlerts","newAlert","edited","contactFullName","added","unshift","undefined","finally","fetchContacts","openDeleteModal","fullName","closeDeleteModal","onDragAndDrop","dropIndex","updatedContacts","Home","deleteContact","Validator","str","isEmpty","isAlphanumeric","isLength","min","max","isEmail","isMobilePhone","isURL","protocols","FormatText","escape","normalizeEmail","showFormErrors","flags","placeholders","github","linkedin","skype","entries","flag","errorMsg","alert","AddContact","buttonLoading","setButtonLoading","pathname","form","onSubmit","e","preventDefault","newContact","telNumber","newContactDetails","details","isValid","validationFlags","isUsername","isPhoneNumber","isNotes","isLink","values","headers","stayOnThePage","reset","Group","Control","name","autoComplete","label","setInitialContact","locationState","EditContact","editingContactID","useParams","editingContact","setEditingContact","setDetails","handleInputEvent","updatedEditingContact","updatedDetails","_setEditingContact","loader","reqOptions","NotFound","notFoundImg","year","Date","getFullYear","Alert","Alerts","messages","msg","Details","setContact","Table","striped","bordered","responsive","href","rel","App","setTimeout","shift","path","exact","render","props","DndProvider","backend","HTML5Backend","basename","process","getElementById"],"mappings":"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","file":"static/js/main.6dbf6520.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Toolbar\":\"Toolbar_Toolbar__2u9mI\",\"btnGroup\":\"Toolbar_btnGroup__1PYXH\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"NoSearched\":\"NoSearched_NoSearched__KJLEw\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"NoContacts\":\"NoContacts_NoContacts__25V0n\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Home\":\"Home_Home__EyIR7\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"NotFound\":\"NotFound_NotFound__ltBMX\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Footer\":\"Footer_Footer__1khEt\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"App\":\"App_App__8VJex\"};","export const GET_CONTACTS = \"ADD_CONTACT\";\nexport const DELETE_CONTACT = \"DELETE_CONTACT\";\nexport const SET_CONTACTS = \"SET_CONTACTS\";\nexport const SET_SEARCHED_CONTACTS = \"SET_SEARCHED_CONTACTS\";\n\nexport const SET_ALERTS = \"SET_ALERTS\";\n\nexport const SELECT_CONTACT = \"SELECT_CONTACT\";\nexport const SELECT_ALL_CONTATCS = \"SELECT_ALL_CONTACTS\";\nexport const UNSELECT_CONTACT = \"UNSELECT_CONTACT\";","import { DELETE_CONTACT, GET_CONTACTS, SET_CONTACTS, SET_SEARCHED_CONTACTS } from \"../types\";\n\nconst defaultState = {\n    contacts: [],\n    searchedContacts: null\n};\n\nconst contactsReducer = (state = defaultState, { type, payload }) => {\n    let updatedState = JSON.parse(JSON.stringify(state));\n\n    switch (type) {\n        case GET_CONTACTS:\n        case SET_CONTACTS:\n            updatedState.contacts = payload;\n            return updatedState;\n\n        case DELETE_CONTACT:\n            updatedState.contacts = updatedState.contacts.filter(({ id }) => id !== payload);\n            return updatedState;\n\n        case SET_SEARCHED_CONTACTS:\n            updatedState.searchedContacts = payload;\n            return updatedState;\n\n        default:\n            return state;\n    }\n};\n\nexport { contactsReducer };","import { SET_ALERTS } from \"../types\";\n\nconst defaultState = {\n    alerts: []\n};\n\nconst alertsReducer = (state = defaultState, { type, payload }) => {\n    let updatedState = JSON.parse(JSON.stringify(state));\n\n    switch (type) {\n        case SET_ALERTS:\n            updatedState.alerts = payload;\n            return updatedState;\n\n        default:\n            return state;\n    };\n};\n\nexport { alertsReducer };","import { SELECT_ALL_CONTATCS, SELECT_CONTACT, UNSELECT_CONTACT } from \"../types\";\n\nconst defaultState = {\n    selectedContacts: {}\n};\n\nconst selectedContactsReducer = (state = defaultState, { type, payload }) => {\n    let updatedState = JSON.parse(JSON.stringify(state));\n\n    switch (type) {\n        case SELECT_CONTACT:\n            updatedState.selectedContacts[payload] = true;\n            return updatedState;\n\n        case UNSELECT_CONTACT:\n            delete updatedState.selectedContacts[payload];\n            return updatedState;\n\n        case SELECT_ALL_CONTATCS:\n            if (Object.keys(updatedState.selectedContacts).length === payload.length) updatedState.selectedContacts = {}\n            else payload.forEach((id) => updatedState.selectedContacts[id] = true)\n\n            return updatedState;\n\n        default:\n            return state;\n    };\n};\n\nexport { selectedContactsReducer };","import { applyMiddleware, combineReducers, createStore } from \"redux\";\nimport { composeWithDevTools } from \"redux-devtools-extension\";\nimport { contactsReducer } from \"./reducers/contactsReducer\";\nimport { alertsReducer } from \"./reducers/alertsReducer\";\nimport { selectedContactsReducer } from \"./reducers/selectedContactsReducer\";\nimport thunk from \"redux-thunk\";\n\nconst rootReducer = combineReducers({\n    contacts: contactsReducer,\n    alerts: alertsReducer,\n    selectedContacts: selectedContactsReducer\n});\n\nexport const store = createStore(rootReducer, composeWithDevTools(applyMiddleware(thunk)));","import {\n    GET_CONTACTS,\n    DELETE_CONTACT,\n    SET_CONTACTS,\n    SET_SEARCHED_CONTACTS,\n    SET_ALERTS,\n    SELECT_CONTACT,\n    UNSELECT_CONTACT,\n    SELECT_ALL_CONTATCS,\n} from \"./types\";\n\n// Ccontacts\nexport const getContactsAction = (payload) => ({ type: GET_CONTACTS, payload });\nexport const deleteContactAction = (payload) => ({\n    type: DELETE_CONTACT,\n    payload,\n});\nexport const setContactsAction = (payload) => ({ type: SET_CONTACTS, payload });\nexport const setSearchedContactsAction = (payload) => ({\n    type: SET_SEARCHED_CONTACTS,\n    payload,\n});\n\n// Alerts\nexport const setAlertsAction = (payload) => ({ type: SET_ALERTS, payload });\n\n// Select and Delete selected contacts\nexport const selectContactAction = (payload) => ({\n    type: SELECT_CONTACT,\n    payload,\n});\nexport const selectAllContactsAction = (payload) => ({ type: SELECT_ALL_CONTATCS, payload });\nexport const unselectContactAction = (payload) => ({\n    type: UNSELECT_CONTACT,\n    payload,\n});\n","export const config = {\n    database: {\n        link: \"https://contact-manager--backend.herokuapp.com/api\"\n    }\n};","import { config } from \"../Util/config\"\nimport { deleteContactAction, getContactsAction, unselectContactAction } from \"./actions\";\n\n// get contacts from database\nexport const fetchContacts = (setLoading) => {\n    return (dispatch) => {\n        fetch(`${config.database.link}/contacts`)\n            .then((res) => res.json())\n            .then((json) => dispatch(getContactsAction(json)))\n            .catch((err) => console.log(err.message))\n            .finally(() => setLoading(false));\n    };\n};\n\n// delete contact from database\nexport const deleteContactFromDB = (_id) => {\n    let requestOptions = { method: \"DELETE\" };\n\n    return (dispatch) => {\n        fetch(`${config.database.link}/contacts/${_id}`, requestOptions)\n            .then(() => dispatch(deleteContactAction(_id)))\n            .catch((err) => console.log(err.message));\n    };\n};\n\n// delete selected contacts from database\n// update state where no deleted contacts\nexport const deleteSelected = (selectedContactsId) => {\n    // 1. get selected contacts id\n    // 2. delete them from contacts by id\n    // 3. delete details of the deleting contact from details by id\n    // 4. delete deleted contact from selectedContacts state\n    // 5. get updated contacts from database\n    // 6. set contacts state\n    let requestOptions = { method: \"DELETE\" };\n\n    return (dispatch) => {\n        let allPromises = [];\n\n        for (let id in selectedContactsId) {\n            let promise = new Promise((res, rej) => {\n                fetch(`${config.database.link}/contacts/${id}`, requestOptions)\n                    .then(() => dispatch(unselectContactAction(id)));\n            });\n\n            allPromises.push(promise);\n        }\n\n        Promise.all(allPromises)\n            .then(() => fetch(`${config.database.link}/contacts`))\n            .then((res) => res.json())\n            .then((json) => dispatch(getContactsAction(json)))\n            .catch((err) => console.log(err));\n    }\n};","import { useDispatch, useSelector } from \"react-redux\";\nimport { Link, useHistory } from \"react-router-dom\";\nimport { selectAllContactsAction } from \"../../Redux/actions\";\nimport { deleteSelected } from \"../../Redux/middleware\";\nimport {\n    Container,\n    Row,\n    Col,\n    Nav,\n    Navbar,\n    Button,\n    Dropdown,\n    DropdownButton,\n    ButtonGroup,\n    Badge,\n    OverlayTrigger,\n    Tooltip,\n} from \"react-bootstrap\";\n\nimport s from \"./Header.module.sass\";\n\nconst Header = () => {\n    // States\n    // ------------------------------------------------------------------------------------------\n    const history = useHistory();\n    const contactsID = useSelector(({ contacts }) => contacts.contacts).map(\n        (contact) => contact._id\n    );\n    const selectedContacts = useSelector(\n        ({ selectedContacts }) => selectedContacts.selectedContacts\n    );\n    const selectedContactsCount = Object.keys(selectedContacts).length;\n    const dispatch = useDispatch();\n\n    // Handle events\n    // ------------------------------------------------------------------------------------------\n    const handleGoToHomepageEvent = () => history.push(\"/\");\n    const handleAddContactEvent = () => history.push(\"/add-contact\");\n\n    const handleSelectAllContactsEvent = () =>\n        dispatch(selectAllContactsAction(contactsID));\n\n    const deleteSelectedHandler = () => {\n        dispatch(deleteSelected(selectedContacts));\n    };\n\n    // Render Header\n    // ------------------------------------------------------------------------------------------\n    return (\n        <header className={s.Header}>\n            <Container>\n                <Row>\n                    <Col>\n                        <Navbar variant=\"dark\" expand=\"sm\">\n                            <Navbar.Brand className={s.logo}>\n                                <Link to=\"/\">Contact Manager</Link>\n                            </Navbar.Brand>\n                            <Nav className=\"ml-auto\">\n                                <Button\n                                    variant=\"outline-light\"\n                                    onClick={handleGoToHomepageEvent}\n                                >\n                                    <i className=\"fas fa-home\"></i>\n                                </Button>\n\n                                <Button\n                                    variant=\"outline-light\"\n                                    onClick={handleAddContactEvent}\n                                >\n                                    <i className=\"fas fa-plus\"></i>\n                                </Button>\n\n                                <DropdownButton\n                                    as={ButtonGroup}\n                                    drop=\"left\"\n                                    variant=\"outline-light\"\n                                    title={<i className=\"fas fa-cog\"></i>}\n                                    className={s.dropdownMenu}\n                                >\n                                    <Dropdown.Item\n                                        className=\"d-flex justify-content-around align-items-center\"\n                                        onClick={handleSelectAllContactsEvent}\n                                    >\n                                        Select All\n                                        <Badge variant=\"dark\">{`${selectedContactsCount}`}</Badge>\n                                    </Dropdown.Item>\n                                    {selectedContactsCount ? (\n                                        <Dropdown.Item\n                                            onClick={deleteSelectedHandler}\n                                        >\n                                            Delete Selected\n                                        </Dropdown.Item>\n                                    ) : (\n                                        <OverlayTrigger\n                                            placement=\"bottom\"\n                                            overlay={\n                                                <Tooltip id=\"tooltip-disabled\">\n                                                    No contacts selected\n                                                </Tooltip>\n                                            }\n                                        >\n                                            <span className=\"d-inline-block\">\n                                                <Dropdown.Item disabled>\n                                                    Delete Selected\n                                                </Dropdown.Item>\n                                            </span>\n                                        </OverlayTrigger>\n                                    )}\n                                </DropdownButton>\n                            </Nav>\n                        </Navbar>\n                    </Col>\n                </Row>\n            </Container>\n        </header>\n    );\n};\n\nexport default Header;\n","export const ItemTypes = {\n    CONTACT: 'Contact'\n};","import { useRef } from \"react\";\nimport { useDrag, useDrop } from \"react-dnd\";\nimport { useHistory } from \"react-router\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport {\n    Col,\n    Card,\n    Button,\n    Form,\n    OverlayTrigger,\n    Tooltip,\n} from \"react-bootstrap\";\nimport PropTypes from \"prop-types\";\n\nimport { ItemTypes } from \"../../Util/ItemTypes\";\nimport {\n    selectContactAction,\n    unselectContactAction,\n} from \"../../Redux/actions\";\n\nimport s from \"./Contact.module.sass\";\n\nconst Contact = ({ contact, index, onDelete, onDnD }) => {\n    // States\n    // ------------------------------------------------------------------------------------------\n    const history = useHistory();\n    const isSelected = useSelector(\n        ({ selectedContacts }) => selectedContacts.selectedContacts\n    )[contact._id];\n\n    const dispatch = useDispatch();\n\n    // Handle edit\n    // ------------------------------------------------------------------------------------------\n    const handleEdit = () => {\n        history.push(`/edit-contact/${contact._id}`, { contact });\n    };\n\n    // Handle delete\n    // ------------------------------------------------------------------------------------------\n    const handleDelete = () =>\n        onDelete(contact._id, `${contact.firstName} ${contact.lastName}`);\n\n    // Handle Select\n    // ------------------------------------------------------------------------------------------\n    const handleSelect = ({ target: { checked } }) => {\n        if (checked) {\n            dispatch(selectContactAction(contact._id));\n        } else {\n            dispatch(unselectContactAction(contact._id));\n        }\n    };\n\n    // Handle More Info\n    // ------------------------------------------------------------------------------------------\n    const handleMoreInfo = () =>\n        history.push(`/details/${contact._id}`, { contact });\n\n    // Drag and Drop\n    // ------------------------------------------------------------------------------------------\n    const ref = useRef(null);\n\n    // Render Contact\n    // ------------------------------------------------------------------------------------------\n    const [, drop] = useDrop({\n        accept: ItemTypes.CONTACT,\n        collect(monitor) {\n            return {\n                handlerId: monitor.getHandlerId(),\n            };\n        },\n        hover(item) {\n            if (!ref.current) return;\n\n            const dragIndex = item.index;\n            const hoverIndex = index;\n\n            // Don't replace items with themselves\n            if (dragIndex === hoverIndex) return;\n\n            onDnD(dragIndex, hoverIndex);\n            item.index = hoverIndex;\n        },\n    });\n\n    const [{ isDragging }, drag] = useDrag({\n        type: ItemTypes.CONTACT,\n        item: () => ({ index }),\n        collect: (monitor) => ({\n            isDragging: monitor.isDragging(),\n        }),\n    });\n\n    drag(drop(ref));\n\n    // Styles for drag and drop\n    // ------------------------------------------------------------------------------------------\n    let opacity = isDragging ? 0.5 : 1;\n\n    // Render Contact\n    // ------------------------------------------------------------------------------------------\n    return (\n        <Col ref={ref} xs={10} sm={8} md={6} lg={4} xl={3} style={{ opacity }}>\n            <Card\n                className={s.Contact}\n                text={isSelected ? \"light\" : \"dark\"}\n                bg={isSelected ? \"dark\" : \"light\"}\n            >\n                <Card.Body className={s.cardBody}>\n                    <Card.Title>\n                        {contact.firstName} {contact.lastName}\n                    </Card.Title>\n                    <Card.Text>{contact.email}</Card.Text>\n                    <Card.Text>{contact.primaryNumber}</Card.Text>\n                    <Card.Text>{contact.workNumber}</Card.Text>\n                    <Card.Subtitle className=\"text-muted\">\n                        {contact.notes}\n                    </Card.Subtitle>\n\n                    <OverlayTrigger\n                        placement=\"bottom\"\n                        overlay={\n                            <Tooltip id=\"tooltip-bottom\">More Info</Tooltip>\n                        }\n                    >\n                        <Button\n                            variant={isSelected ? \"dark\" : \"light\"}\n                            className={s.detailsBtn}\n                            onClick={handleMoreInfo}\n                        >\n                            <i className=\"fas fa-info-circle\"></i>\n                        </Button>\n                    </OverlayTrigger>\n                </Card.Body>\n                <Card.Footer className={s.options}>\n                    <OverlayTrigger\n                        placement=\"bottom\"\n                        overlay={<Tooltip id=\"tooltip-bottom\">Delete</Tooltip>}\n                    >\n                        <Button variant=\"danger\" onClick={handleDelete}>\n                            <i className=\"fas fa-user-slash\"></i>\n                        </Button>\n                    </OverlayTrigger>\n\n                    <OverlayTrigger\n                        placement=\"bottom\"\n                        overlay={<Tooltip id=\"tooltip-bottom\">Select</Tooltip>}\n                    >\n                        <Form.Check\n                            type=\"checkbox\"\n                            className={s.check}\n                            onChange={handleSelect}\n                            checked={isSelected ? true : false}\n                        />\n                    </OverlayTrigger>\n\n                    <OverlayTrigger\n                        placement=\"bottom\"\n                        overlay={<Tooltip id=\"tooltip-bottom\">Edit</Tooltip>}\n                    >\n                        <Button variant=\"primary\" onClick={handleEdit}>\n                            <i className=\"fas fa-user-edit\"></i>\n                        </Button>\n                    </OverlayTrigger>\n                </Card.Footer>\n            </Card>\n        </Col>\n    );\n};\n\n// PropTypes\nContact.propTypes = {\n    contact: PropTypes.shape({\n        _id: PropTypes.string.isRequired,\n        firstName: PropTypes.string.isRequired,\n        lastName: PropTypes.string.isRequired,\n        email: PropTypes.string.isRequired,\n        primaryNumber: PropTypes.string.isRequired,\n        workNumber: PropTypes.string.isRequired,\n        notes: PropTypes.string.isRequired,\n    }).isRequired,\n    index: PropTypes.number.isRequired,\n    onDelete: PropTypes.func.isRequired,\n    onDnD: PropTypes.func.isRequired,\n};\n\nexport default Contact;\n","import { Container, Row, Col, Card, Button, Form } from \"react-bootstrap\";\n\nimport s from \"./ContactSkeleton.module.sass\";\n\nconst ContactSkeleton = () => {\n    return (\n        <Container>\n            <Row className=\"d-flex justify-content-center\">\n                <Col xs={10} sm={8} md={6} lg={4} xl={3}>\n                    <Card className={s.Contact} bg=\"light\">\n                        <Card.Body className={s.cardBody}>\n                            <Card.Title className={s.placeholder}>\n                                &nbsp;\n                            </Card.Title>\n                            <Card.Text className={s.placeholder}>\n                                &nbsp;\n                            </Card.Text>\n                            <Card.Text className={s.placeholder}>\n                                &nbsp;\n                            </Card.Text>\n                            <Card.Text className={s.placeholder}>\n                                &nbsp;\n                            </Card.Text>\n                            <Card.Subtitle\n                                className={`${s.placeholder} text-muted`}\n                            >\n                                &nbsp;\n                            </Card.Subtitle>\n                        </Card.Body>\n                        <Card.Footer className={s.options}>\n                            <Button variant=\"danger\" disabled>\n                                <i className=\"fas fa-user-slash\"></i>\n                            </Button>\n\n                            <Form.Check\n                                type=\"checkbox\"\n                                className={s.check}\n                                disabled\n                            />\n\n                            <Button variant=\"primary\" disabled>\n                                <i className=\"fas fa-user-edit\"></i>\n                            </Button>\n                        </Card.Footer>\n                    </Card>\n                </Col>\n            </Row>\n        </Container>\n    );\n};\n\nexport default ContactSkeleton;\n","import { useEffect, useRef } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Container, Row, Col, Button } from \"react-bootstrap\";\nimport PropTypes from \"prop-types\";\n\nimport s from \"./Modal.module.sass\";\n\nconst Modal = ({ children, onClose }) => {\n    // Variables\n    // ------------------------------------------------------------------------------------------\n    const $root = document.createElement(\"div\");\n    const $background = useRef(null);\n\n    // Add Modal component to DOM\n    // ------------------------------------------------------------------------------------------\n    useEffect(() => {\n        document.body.appendChild($root);\n\n        const handleKeyDown = ({ key }) => {\n            if (key === \"Escape\") onClose();\n        };\n\n        const handleBackgroundClick = ({ target }) => {\n            if (target === $background.current) onClose();\n        };\n\n        document.documentElement.addEventListener(\"keydown\", handleKeyDown);\n        $root.addEventListener(\"click\", handleBackgroundClick);\n\n        return () => {\n            document.documentElement.removeEventListener(\n                \"keydown\",\n                handleKeyDown\n            );\n            $root.remove();\n        };\n    }, [$root, onClose]);\n\n    // Render Modal\n    // ------------------------------------------------------------------------------------------\n    return ReactDOM.createPortal(\n        <Container className={s.Modal} ref={$background} fluid>\n            <Row>\n                <Col className={s.block}>\n                    <Button\n                        variant=\"light\"\n                        onClick={onClose}\n                        className={s.closeBtn}\n                    >\n                        <i className=\"fas fa-times\" />\n                    </Button>\n\n                    {children}\n                </Col>\n            </Row>\n        </Container>,\n        $root\n    );\n};\n\n// PropTypes\nModal.propTypes = {\n    onClose: PropTypes.func.isRequired,\n};\n\nexport default Modal;\n","import PropTypes from \"prop-types\";\nimport Button from \"react-bootstrap/Button\";\n\nimport Modal from \"../Modal/Modal\";\n\nconst ConfirmDelete = ({ onConfirm, onCancel }) => {\n    // Render ConfirmDelete\n    // ------------------------------------------------------------------------------------------\n    return (\n        <Modal onClose={onCancel}>\n            <h2 style={{ marginBottom: \"24px\" }}>\n                Are you sure you want to delete this contact?\n            </h2>\n            <div className=\"justify-content-center\">\n                <Button\n                    variant=\"primary\"\n                    onClick={onCancel}\n                    style={{ marginRight: \"16px\" }}\n                >\n                    Cancel\n                </Button>\n                <Button variant=\"danger\" onClick={onConfirm}>\n                    Delete\n                </Button>\n            </div>\n        </Modal>\n    );\n};\n\n// PropTypes\nConfirmDelete.propTypes = {\n    onConfirm: PropTypes.func.isRequired,\n    onCancel: PropTypes.func.isRequired,\n};\n\nexport default ConfirmDelete;\n","import { useDispatch, useSelector } from \"react-redux\";\nimport { Container, Row, Col, FormControl, InputGroup } from \"react-bootstrap\";\n\nimport { setSearchedContactsAction } from \"../../Redux/actions\";\n\nimport s from \"./Toolbar.module.sass\";\n\nconst Toolbar = () => {\n    // States\n    // ------------------------------------------------------------------------------------------\n    const contacts = useSelector(({ contacts }) => contacts.contacts);\n    const dispatch = useDispatch();\n\n    // Search contacts\n    // ------------------------------------------------------------------------------------------\n    const handleSearchEvent = ({ target: { value: searchString } }) => {\n        searchString = searchString.toString().trim().replace(/\\s+/g, \" \");\n\n        // if search input is not empty => show matched results\n        if (searchString.length > 0) {\n            const pattern = new RegExp(`${searchString}`, \"gim\");\n\n            let updatedSearchedContacts = contacts.filter(\n                ({ firstName, lastName }) =>\n                    pattern.test(`${firstName} ${lastName}`) // full name\n            );\n\n            dispatch(setSearchedContactsAction(updatedSearchedContacts));\n        } else {\n            // If search input is empty => show all the existing contacts\n            dispatch(setSearchedContactsAction(null));\n        }\n    };\n\n    // Rendering\n    // ------------------------------------------------------------------------------------------\n    return (\n        <section className={s.Toolbar}>\n            <Container>\n                <Row className=\"justify-content-center\">\n                    <Col xs={10} sm={8} md={6} lg={4}>\n                        <InputGroup\n                            className=\"mb-3\"\n                            onInput={handleSearchEvent}\n                        >\n                            <FormControl placeholder=\"Contact name ..\" />\n                            <InputGroup.Append>\n                                <InputGroup.Text>\n                                    <i className=\"fas fa-search\"></i>\n                                </InputGroup.Text>\n                            </InputGroup.Append>\n                        </InputGroup>\n                    </Col>\n                </Row>\n            </Container>\n        </section>\n    );\n};\n\nexport default Toolbar;\n","export default __webpack_public_path__ + \"static/media/noSearched.c36f2123.png\";","import { Col } from \"react-bootstrap\";\n\nimport noSearchedImg from \"./Img/noSearched.png\";\n\nimport s from \"./NoSearched.module.sass\";\n\nconst NoSearched = () => {\n    // Rendering\n    // ------------------------------------------------------------------------------------------\n    return (\n        <Col xs={10} sm={8} md={6} lg={4} className={s.NoSearched}>\n            <img src={noSearchedImg} alt=\"no-searched\" />\n            <h2>Not found ..</h2>\n        </Col>\n    );\n};\n\nexport default NoSearched;\n","export default __webpack_public_path__ + \"static/media/noContacts.fef44e3d.png\";","import { useHistory } from \"react-router-dom\";\nimport { Col, Button } from \"react-bootstrap\";\n\nimport noContactsImg from \"./Img/noContacts.png\";\n\nimport s from \"./NoContacts.module.sass\";\n\nconst NoContacts = () => {\n    // States\n    // ------------------------------------------------------------------------------------------\n    const history = useHistory();\n\n    // Go to add contact page\n    // ------------------------------------------------------------------------------------------\n    const handleAddEvent = () => history.push(\"/add-contact\");\n\n    // Rendering\n    // ------------------------------------------------------------------------------------------\n    return (\n        <Col xs={10} sm={8} md={6} lg={4} className={s.NoContacts}>\n            <img src={noContactsImg} alt=\"no-searched\" />\n            <h2>No contacts yet ..</h2>\n            <Button variant=\"secondary\" onClick={handleAddEvent}>\n                Add Contact <i className=\"fas fa-plus\"></i>\n            </Button>\n        </Col>\n    );\n};\n\nexport default NoContacts;\n","import { useState, useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useHistory } from \"react-router\";\nimport { Container, Row } from \"react-bootstrap\";\n\nimport Contact from \"../../Components/Contact/Contact\";\nimport ContactSkeleton from \"../../Components/ContactSkeleton/ContactSkeleton\";\nimport ConfirmDelete from \"../../Components/ConfirmDelete/ConfirmDelete\";\nimport Toolbar from \"../../Components/Toolbar/Toolbar\";\nimport NoSearched from \"../../Components/NoSearched/NoSearched\";\nimport NoContacts from \"../../Components/NoContacts/NoContacts\";\nimport { deleteContactFromDB, fetchContacts } from \"../../Redux/middleware\";\nimport { setAlertsAction, setContactsAction } from \"../../Redux/actions\";\n\nimport s from \"./Home.module.sass\";\n\nconst Contacts = () => {\n    // States\n    // -----------------------------------------------------------------------------\n    const [loading, setLoading] = useState(false);\n    const contacts = useSelector(({ contacts }) => contacts.contacts);\n    const searchedContacts = useSelector(\n        ({ contacts }) => contacts.searchedContacts\n    );\n    const alerts = useSelector(({ alerts }) => alerts.alerts);\n    const [deletingContactId, setDeletingContactId] = useState(null);\n    const [deletingContactFullname, setDeletingContactFullname] = useState(\"\");\n\n    const dispatch = useDispatch();\n    const history = useHistory();\n\n    // If there are alerts => show them\n    // Get contacts from datebase\n    // -----------------------------------------------------------------------------\n    useEffect(() => {\n        if (history.location.state) {\n            let updatedAlerts = [...alerts];\n            let newAlert = \"\";\n\n            if (history.location.state.edited) {\n                // if contact was edited\n                newAlert = `Edited \"${history.location.state.contactFullName}\" contact`;\n            }\n\n            if (history.location.state.added) {\n                // if new contact is added\n                newAlert = `Added \"${history.location.state.contactFullName}\" contact`;\n            }\n\n            updatedAlerts.unshift(newAlert);\n            history.replace(\"/\", undefined);\n\n            // show alerts\n            dispatch(setAlertsAction(updatedAlerts));\n        }\n\n        // get contacts from database\n        if (!contacts.length) setLoading(true);\n\n        dispatch(fetchContacts(setLoading));\n    }, [history, alerts, dispatch, contacts.length]);\n\n    // Contact deleting\n    // -----------------------------------------------------------------------------\n    const openDeleteModal = (_id, fullName) => {\n        // open delete modal for asking about delering\n        // set deleting contact fullname for alerts show\n        setDeletingContactId(_id);\n        setDeletingContactFullname(fullName);\n    };\n\n    const closeDeleteModal = () => {\n        setDeletingContactId(null);\n        setDeletingContactFullname(\"\");\n    };\n\n    const deleteContact = (_id) => {\n        // set alert about contact deleting\n        // close confirm modal\n        // delete contact from database\n        let updatedAlerts = [...alerts];\n        let newAlert = `Deleted \"${deletingContactFullname}\" contact`;\n\n        updatedAlerts.unshift(newAlert);\n        dispatch(setAlertsAction(updatedAlerts));\n\n        closeDeleteModal();\n        dispatch(deleteContactFromDB(_id));\n    };\n\n    // Drag and Drop\n    // ------------------------------------------------------------------------------------------\n    const onDragAndDrop = (dragIndex, dropIndex) => {\n        let updatedContacts = contacts.map((contact, index) => {\n            if (index === dragIndex) return { ...contacts[dropIndex] };\n            if (index === dropIndex) return { ...contacts[dragIndex] };\n\n            return contact;\n        });\n\n        dispatch(setContactsAction(updatedContacts));\n    };\n\n    // Render Home\n    // ------------------------------------------------------------------------------------------\n    return (\n        <main className={s.Home}>\n            <Toolbar />\n\n            <section>\n                {(loading && <ContactSkeleton />) || (\n                    <Container>\n                        <Row className=\"d-flex justify-content-center\">\n                            {contacts.length && !searchedContacts ? (\n                                contacts.map((contact, index) => (\n                                    <Contact\n                                        contact={contact}\n                                        index={index}\n                                        key={contact._id}\n                                        onDelete={openDeleteModal}\n                                        onDnD={onDragAndDrop}\n                                    />\n                                ))\n                            ) : searchedContacts && !searchedContacts.length ? (\n                                <NoSearched />\n                            ) : searchedContacts ? (\n                                searchedContacts.map((contact, index) => (\n                                    <Contact\n                                        contact={contact}\n                                        index={index}\n                                        key={contact._id}\n                                        onDelete={openDeleteModal}\n                                        onDnD={onDragAndDrop}\n                                    />\n                                ))\n                            ) : (\n                                loading || <NoContacts />\n                            )}\n                        </Row>\n                    </Container>\n                )}\n            </section>\n\n            {deletingContactId && (\n                <ConfirmDelete\n                    onConfirm={() => deleteContact(deletingContactId)}\n                    onCancel={closeDeleteModal}\n                />\n            )}\n        </main>\n    );\n};\n\nexport default Contacts;\n","import isEmpty from \"validator/lib/isEmpty\";\nimport isLength from \"validator/lib/isLength\";\nimport isAlphanumeric from \"validator/lib/isAlphanumeric\";\nimport isEmail from \"validator/lib/isEmail\";\nimport isMobilePhone from \"validator/lib/isMobilePhone\";\nimport isURL from \"validator/lib/isURL\";\n\n// validate input values in <AddContact /> and <EditContact />\nexport class Validator {\n    static isUsername(str) {\n        return (\n            !isEmpty(str) &&\n            isAlphanumeric(str, \"en-US\") &&\n            isLength(str, { min: 2, max: 16 })\n        );\n    }\n\n    static isEmail(str) {\n        return !isEmpty(str) && isEmail(str);\n    }\n\n    static isPhoneNumber(str) {\n        return !isEmpty(str) && isMobilePhone(str, \"am-AM\");\n    }\n\n    static isNotes(str) {\n        return (\n            !isEmpty(str) &&\n            isAlphanumeric(str, \"en-US\") &&\n            isLength(str, { min: 2, max: 8 })\n        );\n    }\n\n    static isLink(str) {\n        return (\n            // field might be empty, because github, linkedin and skype links are optional\n            isEmpty(str) || isURL(str, {\n                protocols: [\"http\", \"https\"]\n            })\n        )\n    }\n}","import escape from \"validator/lib/escape\";\nimport trim from \"validator/lib/trim\";\nimport normalizeEmail from \"validator/lib/normalizeEmail\";\n\n// format input values in <AddContact /> and <EditContact />\nexport class FormatText {\n    static email(str) {\n        return trim(escape(normalizeEmail(str)));\n    }\n\n    static text(str) {\n        return trim(escape(str));\n    }\n\n    static telNumber(str) {\n        return trim(str);\n    }\n}","// This function is used in <AddContact /> and <EditContact /> for validation errors displaying\nexport const showFormErrors = (flags) => {\n    const placeholders = {\n        firstName: \"First name *\",\n        lastName: \"Last name *\",\n        email: \"@ Email *\",\n        primaryNumber: \"Primary Number *\",\n        workNumber: \"Work Number *\",\n        notes: \"Notes *\",\n        github: \"GitHub link\",\n        linkedin: \"Linkedin link\",\n        skype: \"Skype link\",\n    };\n\n    for (let [flag, value] of Object.entries(flags)) {\n        if (value === false) {\n            let errorMsg = `Invalid ${placeholders[flag]}`;\n            alert(errorMsg);\n            break;\n        }\n    }\n}","import { useEffect, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useHistory } from \"react-router-dom\";\nimport { Container, Row, Col, Form, Button } from \"react-bootstrap\";\n\nimport { Validator } from \"../../Util/Validator\";\nimport { FormatText } from \"../../Util/FormatText\";\nimport { setAlertsAction } from \"../../Redux/actions\";\nimport { config } from \"../../Util/config\";\nimport { showFormErrors } from \"../../Util/showFormErrors\";\n\nimport s from \"./AddContact.module.sass\";\n\nconst AddContact = () => {\n    // States\n    // ------------------------------------------------------------------------------------------\n    const alerts = useSelector(({ alerts }) => alerts.alerts);\n    const [buttonLoading, setButtonLoading] = useState(false);\n\n    const dispatch = useDispatch();\n    const history = useHistory();\n\n    // If there are alerts => show them\n    // ------------------------------------------------------------------------------------------\n    useEffect(() => {\n        if (history.location.state) {\n            let updatedAlerts = [...alerts];\n            let newAlert = \"\";\n\n            if (history.location.state.added) {\n                newAlert = `Added \"${history.location.state.contactFullName}\" contact`;\n            }\n\n            updatedAlerts.unshift(newAlert);\n            history.replace(history.location.pathname, undefined);\n\n            dispatch(setAlertsAction(updatedAlerts));\n        }\n    }, [alerts, dispatch, history]);\n\n    // Add form handling\n    // -----------------------------------------------------------------------------\n    const handleFormSubmit = (e) => {\n        setButtonLoading(true);\n        e.preventDefault();\n        let { target: form } = e;\n\n        // Creating a new contact object\n        const newContact = {\n            firstName: FormatText.text(form.firstName.value),\n            lastName: FormatText.text(form.lastName.value),\n            email: FormatText.email(form.email.value),\n            primaryNumber: FormatText.telNumber(form.primaryNumber.value),\n            workNumber: FormatText.telNumber(form.workNumber.value),\n            notes: FormatText.text(form.notes.value),\n        };\n\n        const newContactDetails = {\n            details: {\n                github: form.github.value,\n                linkedin: form.linkedin.value,\n                skype: form.skype.value,\n            },\n        };\n\n        // Validation\n        let isValid = true;\n\n        const validationFlags = {\n            firstName: Validator.isUsername(newContact.firstName),\n            lastName: Validator.isUsername(newContact.lastName),\n            email: Validator.isEmail(newContact.email),\n            primaryNumber: Validator.isPhoneNumber(newContact.primaryNumber),\n            workNumber: Validator.isPhoneNumber(newContact.workNumber),\n            notes: Validator.isNotes(newContact.notes),\n            github: Validator.isLink(newContactDetails.details.github),\n            linkedin: Validator.isLink(newContactDetails.details.linkedin),\n            skype: Validator.isLink(newContactDetails.details.skype),\n        };\n\n        for (let flag of Object.values(validationFlags)) {\n            if (flag === false) {\n                isValid = false;\n                break;\n            }\n        }\n\n        if (!isValid) {\n            showFormErrors(validationFlags);\n            return;\n        }\n\n        // add new contact to batabase\n        fetch(`${config.database.link}/contacts`, {\n            method: \"POST\",\n            headers: { \"Content-Type\": \"application/json\" },\n            body: JSON.stringify(newContact),\n        })\n            .then((res) => res.json())\n            .then(({ _id }) => {\n                return fetch(`${config.database.link}/details/${_id}`, {\n                    method: \"PATCH\",\n                    headers: { \"Content-Type\": \"application/json\" },\n                    body: JSON.stringify(newContactDetails),\n                });\n            })\n            .then(() => {\n                setButtonLoading(false);\n                // if user don't want to leave page => don't leave adding page\n                // otherwise go to homepage\n                if (form.stayOnThePage.checked) {\n                    history.push(history.location.pathname, {\n                        added: true,\n                        contactFullName: `${newContact.firstName} ${newContact.lastName}`,\n                    });\n                    form.reset();\n                } else {\n                    history.push(\"/\", {\n                        added: true,\n                        contactFullName: `${newContact.firstName} ${newContact.lastName}`,\n                    });\n                }\n            })\n            .catch((err) => console.log(err));\n    };\n\n    // Candel adding a new contact => go to homepage\n    // ------------------------------------------------------------------------------------------\n    const handleCancelEvent = () => history.push(\"/\");\n\n    // Render AddContact\n    // ------------------------------------------------------------------------------------------\n    return (\n        <main className={s.AddContact}>\n            <Container>\n                <Row className=\"d-flex justify-content-center align-items-center\">\n                    <Col xs={12} sm={10} md={8} lg={6} className={s.title}>\n                        <h2>Add Contact</h2>\n                    </Col>\n                    <div className=\"w-100\"></div>\n                    <Col xs={12} sm={10} md={8} lg={6} className={s.form}>\n                        <Form onSubmit={handleFormSubmit}>\n                            <Form.Row>\n                                <Form.Group as={Col}>\n                                    <Form.Control\n                                        type=\"text\"\n                                        name=\"firstName\"\n                                        placeholder=\"First name *\"\n                                        autoComplete=\"off\"\n                                    />\n                                </Form.Group>\n\n                                <Form.Group as={Col}>\n                                    <Form.Control\n                                        type=\"text\"\n                                        name=\"lastName\"\n                                        placeholder=\"Last name *\"\n                                        autoComplete=\"off\"\n                                    />\n                                </Form.Group>\n                            </Form.Row>\n\n                            <Form.Group>\n                                <Form.Control\n                                    type=\"text\"\n                                    name=\"email\"\n                                    placeholder=\"@ Email *\"\n                                    autoComplete=\"off\"\n                                />\n                            </Form.Group>\n\n                            <Form.Group>\n                                <Form.Control\n                                    type=\"text\"\n                                    name=\"primaryNumber\"\n                                    placeholder=\"Primary phone number *\"\n                                    autoComplete=\"off\"\n                                />\n                            </Form.Group>\n\n                            <Form.Group>\n                                <Form.Control\n                                    type=\"text\"\n                                    name=\"workNumber\"\n                                    placeholder=\"Work phone number *\"\n                                    autoComplete=\"off\"\n                                />\n                            </Form.Group>\n\n                            <Form.Group>\n                                <Form.Control\n                                    type=\"text\"\n                                    name=\"notes\"\n                                    placeholder=\"Notes *\"\n                                    autoComplete=\"off\"\n                                />\n                            </Form.Group>\n\n                            <Form.Group>\n                                <Form.Control\n                                    type=\"text\"\n                                    name=\"github\"\n                                    placeholder=\"GitHub link\"\n                                    autoComplete=\"off\"\n                                />\n                            </Form.Group>\n\n                            <Form.Group>\n                                <Form.Control\n                                    type=\"text\"\n                                    name=\"linkedin\"\n                                    placeholder=\"Linkedin link\"\n                                    autoComplete=\"off\"\n                                />\n                            </Form.Group>\n\n                            <Form.Group>\n                                <Form.Control\n                                    type=\"text\"\n                                    name=\"skype\"\n                                    placeholder=\"Skype link\"\n                                    autoComplete=\"off\"\n                                />\n                            </Form.Group>\n\n                            <Form.Group>\n                                <Form.Check\n                                    type=\"checkbox\"\n                                    name=\"stayOnThePage\"\n                                    id=\"stayOnThePage\"\n                                    label=\"Stay on the page\"\n                                />\n                            </Form.Group>\n\n                            <Button\n                                variant=\"secondary\"\n                                onClick={handleCancelEvent}\n                                disabled={buttonLoading}\n                            >\n                                Cancel\n                            </Button>\n                            <Button\n                                variant=\"primary\"\n                                type=\"submit\"\n                                disabled={buttonLoading}\n                            >\n                                Save <i className=\"fas fa-save\"></i>\n                            </Button>\n                        </Form>\n                    </Col>\n                </Row>\n            </Container>\n        </main>\n    );\n};\n\nexport default AddContact;\n","// used in <EditContact /> and <Details />\nexport const setInitialContact = (locationState) =>\n    locationState === undefined\n        ? {\n            id: \"\",\n            firstName: \"\",\n            lastName: \"\",\n            email: \"\",\n            primaryNumber: \"\",\n            workNumber: \"\",\n            notes: \"\",\n        }\n        : locationState.contact;","import { useEffect, useState } from \"react\";\nimport { useHistory, useParams } from \"react-router-dom\";\nimport { Container, Row, Col, Form, Button } from \"react-bootstrap\";\nimport PulseLoader from \"react-spinners/PulseLoader\";\n\nimport { Validator } from \"../../Util/Validator\";\nimport { FormatText } from \"../../Util/FormatText\";\nimport { setInitialContact } from \"../../Util/setInitialContact\";\nimport { config } from \"../../Util/config\";\nimport { showFormErrors } from \"../../Util/showFormErrors\";\n\nimport s from \"./EditContact.module.sass\";\n\nconst EditContact = () => {\n    // States\n    // ------------------------------------------------------------------------------------------\n    const [loading, setLoading] = useState(false);\n    const [buttonLoading, setButtonLoading] = useState(false);\n    const history = useHistory();\n    const { id: editingContactID } = useParams(); // Get editing contact id from dynamic route\n\n    const [editingContact, setEditingContact] = useState(\n        setInitialContact(history.location.state)\n    );\n    const [details, setDetails] = useState({\n        github: \"\",\n        linkedin: \"\",\n        skype: \"\",\n    });\n\n    // Get editing contact\n    // ------------------------------------------------------------------------------------------\n    useEffect(() => {\n        setLoading(true);\n        if (!editingContactID) history.push(\"/not-found\");\n\n        fetch(`${config.database.link}/details/${editingContactID}`)\n            .then((res) => res.json())\n            .then((details) => {\n                if (history.location.state === undefined) {\n                    fetch(\n                        `${config.database.link}/contacts/${editingContactID}`\n                    )\n                        .then((res) => res.json())\n                        .then((contact) => setEditingContact(contact))\n                        .catch((err) => console.log(err.message));\n                }\n\n                setDetails(details);\n                setLoading(false);\n            })\n            .catch((err) => console.log(err))\n            .finally(() => setLoading(false));\n\n        if (history.location.state === undefined) {\n            setLoading(true);\n            fetch(`${config.database.link}/contacts/${editingContactID}`, {\n                method: \"GET\",\n            })\n                .then((res) => res.json())\n                .then((contact) => setEditingContact(contact))\n                .catch((err) => console.log(err.message));\n        }\n    }, [history, editingContactID]);\n\n    // Handle inputs\n    // ------------------------------------------------------------------------------------------\n    const handleInputEvent = ({ target: { name, value } }) => {\n        let updatedEditingContact = { ...editingContact };\n        let updatedDetails = { ...details };\n\n        let _setEditingContact = true; // if true => editing contact was edited, else details\n\n        switch (name) {\n            case \"firstName\":\n            case \"lastName\":\n            case \"notes\":\n                updatedEditingContact[name] = FormatText.text(value);\n                break;\n            case \"email\":\n                updatedEditingContact[name] = FormatText.email(value);\n                break;\n            case \"primaryNumber\":\n            case \"workNumber\":\n                updatedEditingContact[name] = FormatText.telNumber(value);\n                break;\n            case \"github\":\n            case \"linkedin\":\n            case \"skype\":\n                _setEditingContact = false;\n                updatedDetails[name] = value;\n                break;\n            default:\n                break;\n        }\n\n        if (_setEditingContact) {\n            setEditingContact(updatedEditingContact);\n        } else {\n            setDetails(updatedDetails);\n        }\n    };\n\n    // Edit event hadnling\n    // -----------------------------------------------------------------------------\n    const handleFormSubmit = (e) => {\n        setButtonLoading(true);\n        e.preventDefault();\n\n        // Validation\n        let isValid = true;\n\n        const validationFlags = {\n            firstName: Validator.isUsername(editingContact.firstName),\n            lastName: Validator.isUsername(editingContact.lastName),\n            email: Validator.isEmail(editingContact.email),\n            primaryNumber: Validator.isPhoneNumber(\n                editingContact.primaryNumber\n            ),\n            workNumber: Validator.isPhoneNumber(editingContact.workNumber),\n            notes: Validator.isNotes(editingContact.notes),\n            github: Validator.isLink(details.github),\n            linkedin: Validator.isLink(details.linkedin),\n            skype: Validator.isLink(details.skype),\n        };\n\n        for (let flag of Object.values(validationFlags)) {\n            if (flag === false) {\n                isValid = false;\n                break;\n            }\n        }\n\n        if (!isValid) {\n            showFormErrors(validationFlags);\n            return;\n        }\n\n        // Save to database\n        let reqOptions = {\n            headers: { \"Content-Type\": \"application/json\" },\n            method: \"PUT\",\n        };\n\n        fetch(`${config.database.link}/contacts/${editingContactID}`, {\n            ...reqOptions,\n            body: JSON.stringify(editingContact),\n        })\n            .then(() => {\n                fetch(`${config.database.link}/details/${editingContactID}`, {\n                    ...reqOptions,\n                    method: \"PATCH\",\n                    body: JSON.stringify({ details }),\n                });\n            })\n            .then(() => {\n                setButtonLoading(false);\n\n                history.push(\"/\", {\n                    edited: true,\n                    contactFullName: `${editingContact.firstName} ${editingContact.lastName}`,\n                });\n            })\n            .catch((err) => console.log(err.message));\n    };\n\n    // Cancel event hadnling\n    // -----------------------------------------------------------------------------\n    const handleCancelEvent = () => history.push(\"/\");\n\n    // Render EditContact\n    // ------------------------------------------------------------------------------------------\n    return (\n        <main className={s.EditContact}>\n            {(loading && (\n                <Container className={s.loader}>\n                    <Row>\n                        <Col>\n                            <PulseLoader loading={loading} />\n                        </Col>\n                    </Row>\n                </Container>\n            )) || (\n                <Container>\n                    <Row className=\"d-flex justify-content-center align-items-center\">\n                        <Col xs={12} sm={10} md={8} lg={6} className={s.title}>\n                            <h2>Edit Contact</h2>\n                        </Col>\n                        <div className=\"w-100\"></div>\n                        <Col xs={12} sm={10} md={8} lg={6} className={s.form}>\n                            <Form onSubmit={handleFormSubmit}>\n                                <Form.Row>\n                                    <Form.Group as={Col}>\n                                        <Form.Control\n                                            type=\"text\"\n                                            name=\"firstName\"\n                                            value={editingContact.firstName}\n                                            onInput={handleInputEvent}\n                                            placeholder=\"First name *\"\n                                            autoComplete=\"off\"\n                                        />\n                                    </Form.Group>\n\n                                    <Form.Group as={Col}>\n                                        <Form.Control\n                                            type=\"text\"\n                                            name=\"lastName\"\n                                            value={editingContact.lastName}\n                                            onInput={handleInputEvent}\n                                            placeholder=\"Last name *\"\n                                            autoComplete=\"off\"\n                                        />\n                                    </Form.Group>\n                                </Form.Row>\n\n                                <Form.Group>\n                                    <Form.Control\n                                        type=\"text\"\n                                        name=\"email\"\n                                        value={editingContact.email}\n                                        onInput={handleInputEvent}\n                                        placeholder=\"@ Email *\"\n                                        autoComplete=\"off\"\n                                    />\n                                </Form.Group>\n\n                                <Form.Group>\n                                    <Form.Control\n                                        type=\"text\"\n                                        name=\"primaryNumber\"\n                                        value={editingContact.primaryNumber}\n                                        onInput={handleInputEvent}\n                                        placeholder=\"Primary phone number *\"\n                                        autoComplete=\"off\"\n                                    />\n                                </Form.Group>\n\n                                <Form.Group>\n                                    <Form.Control\n                                        type=\"text\"\n                                        name=\"workNumber\"\n                                        value={editingContact.workNumber}\n                                        onInput={handleInputEvent}\n                                        placeholder=\"Work phone number *\"\n                                        autoComplete=\"off\"\n                                    />\n                                </Form.Group>\n\n                                <Form.Group>\n                                    <Form.Control\n                                        type=\"text\"\n                                        name=\"notes\"\n                                        value={editingContact.notes}\n                                        onInput={handleInputEvent}\n                                        placeholder=\"Notes *\"\n                                        autoComplete=\"off\"\n                                    />\n                                </Form.Group>\n\n                                <Form.Group>\n                                    <Form.Control\n                                        type=\"text\"\n                                        name=\"github\"\n                                        value={details.github}\n                                        onInput={handleInputEvent}\n                                        placeholder=\"GitHub link\"\n                                        autoComplete=\"off\"\n                                    />\n                                </Form.Group>\n\n                                <Form.Group>\n                                    <Form.Control\n                                        type=\"text\"\n                                        name=\"linkedin\"\n                                        value={details.linkedin}\n                                        onInput={handleInputEvent}\n                                        placeholder=\"Linkedin link\"\n                                        autoComplete=\"off\"\n                                    />\n                                </Form.Group>\n\n                                <Form.Group>\n                                    <Form.Control\n                                        type=\"text\"\n                                        name=\"skype\"\n                                        value={details.skype}\n                                        onInput={handleInputEvent}\n                                        placeholder=\"Skype link\"\n                                        autoComplete=\"off\"\n                                    />\n                                </Form.Group>\n\n                                <Button\n                                    variant=\"secondary\"\n                                    onClick={handleCancelEvent}\n                                    disabled={buttonLoading}\n                                >\n                                    Cancel\n                                </Button>\n                                <Button\n                                    variant=\"primary\"\n                                    type=\"submit\"\n                                    disabled={buttonLoading}\n                                >\n                                    Save <i className=\"fas fa-save\"></i>\n                                </Button>\n                            </Form>\n                        </Col>\n                    </Row>\n                </Container>\n            )}\n        </main>\n    );\n};\n\nexport default EditContact;\n","export default __webpack_public_path__ + \"static/media/notFound.34f679e2.png\";","import { useHistory } from \"react-router-dom\";\nimport { Container, Row, Col, Button } from \"react-bootstrap\";\n\nimport notFoundImg from \"./Img/notFound.png\";\n\nimport s from \"./NotFound.module.sass\";\n\nconst NotFound = () => {\n    // States\n    // ------------------------------------------------------------------------------------------\n    const history = useHistory();\n\n    // Event handlers\n    // ------------------------------------------------------------------------------------------\n    const handleGoToHomepageEvent = () => history.push(\"/\"); // go to homepage\n\n    const handleAddContactEvent = () => history.push(\"/add-contact\"); // go to add contact page\n\n    // Render NotFound\n    // ------------------------------------------------------------------------------------------\n    return (\n        <main className={s.NotFound}>\n            <Container>\n                <Row className=\"justify-content-center\">\n                    <Col xs={10} sm={8} md={6} lg={4} className=\"text-center\">\n                        <img src={notFoundImg} alt=\"not-found\" />\n                        <Button\n                            variant=\"secondary\"\n                            onClick={handleGoToHomepageEvent}\n                        >\n                            Go to homepage <i className=\"fas fa-home\"></i>\n                        </Button>\n                        <Button\n                            variant=\"secondary\"\n                            onClick={handleAddContactEvent}\n                        >\n                            Add Contact <i className=\"fas fa-plus\"></i>\n                        </Button>\n                    </Col>\n                </Row>\n            </Container>\n        </main>\n    );\n};\n\nexport default NotFound;\n","import { Container, Row, Col } from \"react-bootstrap\";\n\nimport s from \"./Footer.module.sass\";\n\nconst Footer = () => {\n    // Get current year\n    // ------------------------------------------------------------------------------------------\n    const year = new Date().getFullYear();\n\n    // Render Footer\n    // ------------------------------------------------------------------------------------------\n    return (\n        <footer className={s.Footer}>\n            <Container>\n                <Row>\n                    <Col>\n                        <p>Copyright &copy; {year} | Contact Manager</p>\n                    </Col>\n                </Row>\n            </Container>\n        </footer>\n    );\n};\n\nexport default Footer;\n","import PropTypes from \"prop-types\";\nimport { Container, Row, Col, Alert as AlertBootstrap } from \"react-bootstrap\";\n\nimport s from \"./Alerts.module.sass\";\n\nconst Alert = ({ message }) => {\n    // Render Alert\n    // ------------------------------------------------------------------------------------------\n    return (\n        <Col xs={12} sm={6} md={5} className={s.Alert}>\n            <AlertBootstrap variant=\"dark\">{message}</AlertBootstrap>\n        </Col>\n    );\n};\n\nconst Alerts = ({ messages }) => {\n    // Render Alerts\n    // ------------------------------------------------------------------------------------------\n    return (\n        <Container className={s.Alerts}>\n            <Row className=\"d-flex flex-column align-items-end justify-content-end m-0\">\n                {messages.map((msg, index) => (\n                    <Alert message={msg} key={index} />\n                ))}\n            </Row>\n        </Container>\n    );\n};\n\n// Prop-Types\nAlert.propTypes = {\n    message: PropTypes.string.isRequired,\n};\n\nAlerts.propTypes = {\n    messages: PropTypes.arrayOf(PropTypes.string).isRequired,\n};\n\nexport default Alerts;\n","import { useEffect, useState } from \"react\";\nimport { useHistory, useParams } from \"react-router-dom\";\nimport { Container, Row, Col, Table, Button } from \"react-bootstrap\";\nimport PulseLoader from \"react-spinners/PulseLoader\";\n\nimport { setInitialContact } from \"../../Util/setInitialContact\";\nimport { config } from \"../../Util/config\";\n\nimport s from \"./Details.module.sass\";\n\nconst Details = () => {\n    // States\n    // -----------------------------------------------------------------------------------------\n    const [loading, setLoading] = useState(false);\n    const history = useHistory();\n    const { id } = useParams();\n    const [contact, setContact] = useState(\n        setInitialContact(history.location.state)\n    );\n    const [details, setDetails] = useState(null);\n\n    // If contact does not come from history.location => get it from database\n    // Get contact unshowed details from database by showingContactId\n    // ------------------------------------------------------------------------------------------\n    useEffect(() => {\n        setLoading(true);\n        fetch(`${config.database.link}/details/${id}`, { method: \"GET\" })\n            .then((res) => res.json())\n            .then((details) => {\n                if (history.location.state === undefined) {\n                    fetch(`${config.database.link}/contacts/${id}`)\n                        .then((res) => res.json())\n                        .then((contact) => setContact(contact))\n                        .catch((err) => console.log(err));\n                }\n\n                setDetails(details);\n                setLoading(false);\n            })\n            .catch((err) => console.log(err));\n    }, [setLoading, history.location.state, id]);\n\n    // Go to homepage\n    // ------------------------------------------------------------------------------------------\n    const handleGoBack = () => history.push(\"/\");\n\n    // Render Details\n    // ------------------------------------------------------------------------------------------\n    return (\n        <main className={s.Details}>\n            {(loading && (\n                <Container className={s.loader}>\n                    <Row>\n                        <Col>\n                            <PulseLoader loading={loading} />\n                        </Col>\n                    </Row>\n                </Container>\n            )) || (\n                <Container>\n                    <Row className=\"d-flex flex-column\">\n                        <Col>\n                            <Table striped bordered responsive>\n                                <tbody>\n                                    {Object.entries(contact).map(\n                                        ([key, value], index) => {\n                                            if (key === \"_id\") {\n                                                return undefined;\n                                            }\n\n                                            return (\n                                                <tr key={index}>\n                                                    <td>\n                                                        <b>{key}</b>\n                                                    </td>\n                                                    <td>{value}</td>\n                                                </tr>\n                                            );\n                                        }\n                                    )}\n                                    {details &&\n                                        Object.entries(details).map(\n                                            ([key, value], index) => {\n                                                if (value !== \"\") {\n                                                    return (\n                                                        <tr key={index}>\n                                                            <td>\n                                                                <b>{key}</b>\n                                                            </td>\n                                                            <td>\n                                                                <a\n                                                                    href={value}\n                                                                    target=\"_blank\"\n                                                                    rel=\"noreferrer\"\n                                                                >\n                                                                    {value}\n                                                                </a>\n                                                            </td>\n                                                        </tr>\n                                                    );\n                                                }\n\n                                                return undefined;\n                                            }\n                                        )}\n                                </tbody>\n                            </Table>\n                        </Col>\n                    </Row>\n                    <Row>\n                        <Col className=\"text-center\">\n                            <Button variant=\"dark\" onClick={handleGoBack}>\n                                <i className=\"fas fa-arrow-left\"></i>\n                            </Button>\n                        </Col>\n                    </Row>\n                </Container>\n            )}\n        </main>\n    );\n};\n\nexport default Details;\n","import { useEffect } from \"react\";\nimport { Switch, Route, Redirect } from \"react-router-dom\";\nimport { DndProvider } from \"react-dnd\";\nimport { HTML5Backend } from \"react-dnd-html5-backend\";\nimport { useDispatch, useSelector } from \"react-redux\";\n\nimport { setAlertsAction } from \"../../Redux/actions\";\nimport Header from \"../Header/Header\";\nimport Home from \"../../Routes/Home/Home\";\nimport AddContact from \"../../Routes/AddContact/AddContact\";\nimport EditContact from \"../../Routes/EditContact/EditContact\";\nimport NotFound from \"../../Routes/NotFound/NotFound\";\nimport Footer from \"../Footer/Footer\";\nimport Alerts from \"../Alerts/Alerts\";\nimport Details from \"../../Routes/Details/Details\";\n\nimport s from \"./App.module.sass\";\n\nconst App = () => {\n    // States\n    // ------------------------------------------------------------------------------------------\n    const alerts = useSelector(({ alerts }) => alerts.alerts);\n    const dispatch = useDispatch();\n\n    // if there are alerts => show them\n    // after show every 2 seconds updated alerts with shift()\n    // ------------------------------------------------------------------------------------------\n    useEffect(() => {\n        setTimeout(() => {\n            if (alerts.length) {\n                let updatedAlerts = [...alerts];\n                updatedAlerts.shift();\n                dispatch(setAlertsAction(updatedAlerts));\n            }\n        }, 2000);\n    }, [alerts, dispatch]);\n\n    // Render App\n    // ------------------------------------------------------------------------------------------\n    return (\n        <div className={s.App}>\n            <Header />\n\n            <Switch>\n                <Route\n                    path=\"/\"\n                    exact\n                    render={(props) => (\n                        <DndProvider backend={HTML5Backend}>\n                            <Home {...props} />\n                        </DndProvider>\n                    )}\n                />\n                <Route\n                    path=\"/add-contact\"\n                    render={(props) => <AddContact {...props} />}\n                />\n                <Route\n                    path=\"/edit-contact/:id\"\n                    render={(props) => <EditContact {...props} />}\n                />\n                <Route\n                    path=\"/details/:id\"\n                    render={(props) => <Details {...props} />}\n                />\n                <Route\n                    path=\"/not-found\"\n                    render={(props) => <NotFound {...props} />}\n                />\n                <Redirect to=\"/not-found\" />\n            </Switch>\n\n            <Footer />\n\n            <Alerts messages={alerts} />\n        </div>\n    );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter as Router } from \"react-router-dom\"\nimport { Provider } from 'react-redux';\nimport { store } from './Redux/index.js';\n\nimport App from \"./Components/App/App.jsx\"\n\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport './index.css';\n\nReactDOM.render(\n    <Provider store={store}>\n        <Router basename={process.env.PUBLIC_URL}>\n            <App />\n        </Router>\n    </Provider>,\n    document.getElementById('root')\n);","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Contact\":\"ContactSkeleton_Contact__1HosH\",\"placeholder\":\"ContactSkeleton_placeholder__CWS_Z\",\"cardBody\":\"ContactSkeleton_cardBody__W1N2S\",\"options\":\"ContactSkeleton_options__2GZaD\",\"check\":\"ContactSkeleton_check__2gj_X\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Contact\":\"Contact_Contact__1Pi4i\",\"cardBody\":\"Contact_cardBody__1sBUa\",\"detailsBtn\":\"Contact_detailsBtn__1zAgj\",\"options\":\"Contact_options__19l-6\",\"check\":\"Contact_check__1aw1_\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"EditContact\":\"EditContact_EditContact__1ufhJ\",\"loader\":\"EditContact_loader__Y3nqk\",\"title\":\"EditContact_title__1P62N\",\"form\":\"EditContact_form__GtnwV\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Header\":\"Header_Header__A3JwQ\",\"logo\":\"Header_logo__2KQFS\",\"dropdownMenu\":\"Header_dropdownMenu__3uqOC\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Modal\":\"Modal_Modal__2ojh-\",\"block\":\"Modal_block__2nHZE\",\"closeBtn\":\"Modal_closeBtn__10sqJ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"AddContact\":\"AddContact_AddContact__1Wi6k\",\"title\":\"AddContact_title__2kE79\",\"form\":\"AddContact_form__1oG2q\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Alerts\":\"Alerts_Alerts__16RbX\",\"Alert\":\"Alerts_Alert__2D19T\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Details\":\"Details_Details__1VUZP\",\"loader\":\"Details_loader__M7J4h\"};"],"sourceRoot":""}